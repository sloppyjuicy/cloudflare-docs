---
import type { Props } from "@astrojs/starlight/props";
import Default from "@astrojs/starlight/components/Head.astro";
import { differenceInCalendarDays } from "date-fns";
import "tippy.js/dist/tippy.css";

import { getEntry } from "astro:content";
import { getPageDescription } from "~/util/description";

const currentSection = Astro.url.pathname.split("/")[1];

if (currentSection) {
	const product = await getEntry("products", currentSection);

	if (product) {
		if (product.data.meta.title) {
			const titleIdx = Astro.props.entry.data.head.findIndex(
				(x) => x.tag === "title",
			);

			let title: string;

			if (titleIdx !== -1) {
				const existingTitle = Astro.props.entry.data.head[titleIdx].content;
				title = `${existingTitle} · ${product.data.meta.title}`;

				Astro.props.entry.data.head[titleIdx] = {
					tag: "title",
					attrs: {},
					content: title,
				};
			} else {
				title = `${Astro.props.entry.data.title} · ${product.data.meta.title}`;
				Astro.props.entry.data.head.push({
					tag: "title",
					attrs: {},
					content: title,
				});
			}

			Astro.props.entry.data.head.push({
				tag: "meta",
				attrs: { property: "og:title", content: title },
				content: "",
			});
		}

		if (product.data.product.title) {
			const productName = product.data.product.title;
			Astro.props.entry.data.head.push({
				tag: "meta",
				attrs: {
					name: "pcx_product",
					content: productName,
				},
				content: "",
			});
			Astro.props.entry.data.head.push({
				tag: "meta",
				attrs: {
					name: "algolia_product_filter",
					content: productName,
				},
				content: "",
			});
		}

		if (product.data.product.group) {
			const group = product.data.product.group.toLowerCase();

			let ogImage = "https://developers.cloudflare.com/cf-twitter-card.png";
			const images: Record<string, string> = {
				"cloudflare essentials":
					"https://developers.cloudflare.com/core-services-preview.png",
				"cloudflare one": "https://developers.cloudflare.com/zt-preview.png",
				"developer platform":
					"https://developers.cloudflare.com/dev-products-preview.png",
				"network security":
					"https://developers.cloudflare.com/core-services-preview.png",
				"application performance":
					"https://developers.cloudflare.com/core-services-preview.png",
				"application security":
					"https://developers.cloudflare.com/core-services-preview.png",
			};

			if (images[group]) {
				ogImage = images[group];
			}

			const tags = [
				{
					tag: "meta",
					attrs: {
						name: "image",
						content: ogImage,
					},
					content: "",
				},
				{
					tag: "meta",
					attrs: {
						name: "og:image",
						content: ogImage,
					},
					content: "",
				},
				{
					tag: "meta",
					attrs: {
						name: "twitter:image",
						content: ogImage,
					},
					content: "",
				},
			] as const;

			Astro.props.entry.data.head.push(...tags);

			Astro.props.entry.data.head.push({
				tag: "meta",
				attrs: {
					name: "pcx_content_group",
					content: product.data.product.group,
				},
				content: "",
			});
		}
	}

	if (currentSection === "style-guide") {
		Astro.props.entry.data.head.push({
			tag: "meta",
			attrs: {
				name: "robots",
				content: "noindex",
			},
			content: "",
		});
	}
}

Astro.props.entry.data.description ??= await getPageDescription(
	// @ts-expect-error TODO: improve types
	Astro.props.entry,
	Astro.locals,
);

// Adding metadata used for reporting and search indexing

// content type
if (Astro.props.entry.data.pcx_content_type) {
	const contentType = Astro.props.entry.data.pcx_content_type;
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			name: "pcx_content_type",
			content: contentType,
		},
		content: "",
	});
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			name: "algolia_content_type",
			content: contentType,
		},
		content: "",
	});
}

// other products
if (Astro.props.entry.data.products) {
	const additionalProducts = Astro.props.entry.data.products;
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			name: "pcx_additional_products",
			content: additionalProducts.toString(),
		},
		content: "",
	});
}

// other products
if (Astro.props.entry.data.tags) {
	const pageTags = Astro.props.entry.data.tags;
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			name: "pcx_tags",
			content: pageTags.toString(),
		},
		content: "",
	});
}

if (Astro.props.entry.data.updated) {
	const daysBetween = differenceInCalendarDays(
		new Date(),
		Astro.props.entry.data.updated,
	);
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			name: "pcx_last_reviewed",
			content: daysBetween.toString(),
		},
		content: "",
	});
}

// end metadata

if (Astro.props.entry.data.pcx_content_type === "changelog") {
	const href = new URL(Astro.site ?? "");
	href.pathname = Astro.props.entry.slug.concat("/index.xml");

	Astro.props.entry.data.head.push({
		tag: "link",
		attrs: {
			rel: "alternate",
			type: "application/rss+xml",
			href: href.toString(),
		},
		content: "",
	});
}

if (Astro.props.entry.data.external_link) {
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			content: "noindex",
			name: "robots",
		},
		content: "",
	});
	Astro.props.entry.data.head.push({
		tag: "meta",
		attrs: {
			content: `0; url=${Astro.props.entry.data.external_link}`,
			"http-equiv": "refresh",
		},
		content: "",
	});
}
---

<script src="src/scripts/footnotes.ts"></script>
<script src="src/scripts/mermaid.ts"></script>
<script src="src/scripts/analytics.ts"></script>
<Default {...Astro.props}><slot /></Default>
