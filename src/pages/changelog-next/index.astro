---
import StarlightPage, {
	type StarlightPageProps,
} from "@astrojs/starlight/components/StarlightPage.astro";
import { getCollection } from "astro:content";

import Header from "~/components/changelog-next/Header.astro";
import ProductPills from "~/components/changelog-next/ProductPills.astro";

import { Steps } from "~/components";
import { format } from "date-fns";

const notes = await getCollection("changelogs-next");

notes.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const props = {
	frontmatter: {
		title: "Changelogs",
		tableOfContents: false,
		template: "splash",
	},
	hideTitle: true,
	hideBreadcrumbs: true,
} as StarlightPageProps;
---

<StarlightPage {...props}>
	<Header entries={notes} />
	<div
		class="w-full max-w-[50rem] justify-self-center px-4 md:grid md:grid-cols-[15%_auto]"
	>
		{
			notes.map(async (entry) => {
				const date = format(entry.data.date, "MMM dd, yyyy");
				const time = format(entry.data.date, "hh:mm a");
				const productIds = JSON.stringify(
					entry.data.products.map((product) => product.id),
				);

				const { Content } = await entry.render();

				return (
					<>
						<div class="!mt-0" data-products={productIds}>
							<p class="md:content-center md:pr-4 md:text-right md:leading-none">
								<strong class="text-xs">{date}</strong>
								<span class="text-xs">{time}</span>
							</p>
						</div>
						<Steps>
							<ol class="!mt-0 overflow-x-auto" data-products={productIds}>
								<li class="mb-16">
									<div>
										<a
											href={`/changelog-next/${entry.slug}/`}
											class="no-underline hover:underline"
										>
											<h3 class="mb-4 !leading-[36px] text-black">
												{entry.data.title}
											</h3>
										</a>
										<ProductPills products={entry.data.products} />
									</div>
									<p>
										<Content />
									</p>
								</li>
							</ol>
						</Steps>
					</>
				);
			})
		}
	</div>
</StarlightPage>

<script>
	const filter = document.querySelector<HTMLSelectElement>(
		"#changelogs-next-filter",
	);

	filter?.addEventListener("change", () => {
		const entries = document.querySelectorAll<HTMLElement>("[data-products]");

		if (!entries) return;

		const value = filter.value;

		if (value === "all") {
			entries.forEach((entry) => (entry.style.display = ""));

			return;
		}

		for (const entry of entries) {
			if (!entry.dataset.products) continue;

			const products = JSON.parse(entry.dataset.products);

			const show = products.includes(value);

			if (show) {
				entry.style.display = "";
			} else {
				entry.style.display = "none";
			}
		}
	});
</script>

<style>
	:root {
		--sl-content-width: 100% !important;

		.sl-markdown-content
			:not(a, strong, em, del, span, input, code, br)
			+ :not(
				a,
				strong,
				em,
				del,
				span,
				input,
				code,
				br,
				:where(.not-content *)
			) {
			margin-top: 1.5rem;
		}

		.sl-markdown-content {
			margin-top: 0px !important;
		}

		.content-panel {
			padding: 0px !important;
		}

		.feedback-prompt-content {
			display: none !important;
		}

		#footer-links {
			justify-self: center;
		}

		.sl-steps {
			--bullet-size: 24px !important;

			& > li {
				padding-inline-start: calc(var(--bullet-size) + 2.5rem) !important;

				&::before {
					content: "â€¢" !important;
					font-size: calc(var(--bullet-size) * 2) !important;
					line-height: calc(var(--bullet-size) / 1.5) !important;
					color: var(--orange-accent-200) !important;
				}
			}
		}
	}
</style>
